package com.dns.taxchina.ui.util;import java.util.regex.Matcher;import java.util.regex.Pattern;import netlib.util.AppUtil;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.net.Uri;import com.dns.taxchina.ui.LoginActivity;/** * @author fubiao * @version create time:2014-3-19_上午10:47:07 * @Description 登录 util */public class LoginUtil {	public static final int LOGIN_REQUEST_CODE = 390;	public static final int LOGIN_RESULT_CODE = 391;	public static final String USER_ID = "user_id";	public static final String USER_NAME = "user_name";	public static final String LOGIN = "login";	/**	 * 判断是否是手机号	 */	public static boolean isMobileNO(String mobiles) {		String regex = "^(13[0-9]|14[0-9]|15[0-9]|18[0-9])\\d{8}$";		return match(regex, mobiles);	}	/**	 * 验证只含有汉字、数字、字母、下划线，下划线位置不限	 * 	 * @param str	 *            待验证的字符串	 * @return 如果是符合的字符串,返回 <b>true </b>,否则为 <b>false </b>	 */	public static boolean validatorString(String str) {		String regex = "^[a-zA-Z0-9_\u4e00-\u9fa5]+$";		return match(regex, str);	}	/**	 * 验证邮箱	 * 	 * @param 待验证的字符串	 * @return 如果是符合的字符串,返回 <b>true </b>,否则为 <b>false </b>	 */	public static boolean isEmail(String str) {		String regex = "^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$";		return match(regex, str);	}	/**	 * @param regex	 *            正则表达式字符串	 * @param str	 *            要匹配的字符串	 * @return 如果str 符合 regex的正则表达式格式,返回true, 否则返回 false;	 */	private static boolean match(String regex, String str) {		Pattern pattern = Pattern.compile(regex);		Matcher matcher = pattern.matcher(str);		return matcher.matches();	}	/**	 * @param context	 * 	 * @param number	 *            手机号	 * @param smsBody	 *            发送内容	 * 	 */	public static void SendSMS(Context context, String number, String smsBody) {// 发送短信		Uri uri = Uri.parse("smsto:" + number);		Intent it = new Intent(Intent.ACTION_SENDTO, uri);		it.putExtra("sms_body", smsBody);		context.startActivity(it);	}	/**	 * 判断是否登陆	 * 	 * */	public static boolean isLogin(Context context) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		String userId = sharedPreferences.getString(USER_ID, "");		if (userId != null && !userId.equals("")) {			return true;		}		return false;	}	/**	 * 去登陆	 * */	public static void gotoLogin(Context context) {		Intent intent = new Intent();		intent.setClass(context, LoginActivity.class);		context.startActivity(intent);	}	/**	 * 登陆成功保存userId	 * */	public static void saveUserId(Context context, String userId) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		Editor editor = sharedPreferences.edit();		editor.putString(USER_ID, userId);		editor.commit();	}	/**	 * 获取userId	 */	public static String getUserId(Context context) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		return sharedPreferences.getString(USER_ID, "");	}	/**	 * 注销用户	 * 	 * */	public static void delUser(Context context) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		Editor editor = sharedPreferences.edit();		editor.putString(USER_ID, "");		editor.commit();	}	/**	 * 登陆成功保存userName	 * */	public static void saveUserName(Context context, String userId) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		Editor editor = sharedPreferences.edit();		editor.putString(USER_NAME, userId);		editor.commit();	}	/**	 * 获取useruserName	 */	public static String getUserName(Context context) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		return sharedPreferences.getString(USER_NAME, "");	}	/**	 * 注销用户userName	 * 	 * */	public static void delUserName(Context context) {		SharedPreferences sharedPreferences = context.getSharedPreferences(AppUtil.getPackageName(context) + LOGIN, Context.MODE_WORLD_WRITEABLE);		Editor editor = sharedPreferences.edit();		editor.putString(USER_NAME, "");		editor.commit();	}}