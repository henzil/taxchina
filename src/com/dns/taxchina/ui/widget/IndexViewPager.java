package com.dns.taxchina.ui.widget;import java.lang.reflect.Field;import netlib.util.ResourceUtil;import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.animation.DecelerateInterpolator;import android.widget.Scroller;/** * @author fubiao * @version create time:2014-5-4_下午6:12:27 * @Description 首页广告图片viewPager */public class IndexViewPager extends ViewPager {	public IndexViewPager(Context context) {		super(context);		intView();	}	public IndexViewPager(Context context, AttributeSet attrs) {		super(context, attrs);		intView();	}	private static final int TOUCH_STATE_REST = 0;	private static final int TOUCH_STATE_SCROLLING = 1;	private int mTouchState = TOUCH_STATE_REST;	private float mLastMotionX;	private ViewGroup parentView;	private String viewId = null;	private void intView() {		setMyScroller();	}	public void packConflictViewId(String viewId) {		this.viewId = viewId;		if (viewId != null && !viewId.equals("")) {			ResourceUtil resourceUtil = ResourceUtil.getInstance(getContext());			int id = resourceUtil.getViewId(viewId);			if (id > 0) {				View v = getRootView().findViewById(id);				if (v instanceof ViewGroup) {					parentView = (ViewGroup) v;					return;				}			}		}		parentView = null;	}	@Override	public boolean onInterceptTouchEvent(MotionEvent ev) {		mIsBeingDragged = super.onInterceptTouchEvent(ev);		setFocusable(true);		final int action = ev.getAction();		if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {			return true;		}		switch (action) {		case MotionEvent.ACTION_DOWN:			postParentMoveViewNotification(true);			break;		}		return mIsBeingDragged;	}	private boolean mIsBeingDragged;	/**	 * 用于屏蔽和打开底部id为mainScollLayout的父视图左右滑动手势	 * 	 * 如果底部没有id为mainScollLayout的view。则不执行任何方法。	 * 	 * */	private void postParentMoveViewNotification(boolean flage) {		if (parentView == null && viewId != null) {			// 有可能初始化时没找到view，再去找一遍。			packConflictViewId(viewId);		}		if (parentView != null) {			parentView.requestDisallowInterceptTouchEvent(flage);		}	}	@Override	public boolean onTouchEvent(MotionEvent event) {		boolean touchBack = false;		final int action = event.getAction();		final float x = event.getX();		switch (action) {		case MotionEvent.ACTION_DOWN:			mLastMotionX = x;			break;		case MotionEvent.ACTION_MOVE:			int deltaX = (int) (mLastMotionX - x);			mLastMotionX = x;//			Log.e("tag", "deltaX = " + deltaX);//			Log.e("tag", "getScrollX() = "+getScrollX());//			Log.e("tag", "(getCurrentItem() * getWidth()) = " + (getCurrentItem() * getWidth()));			if (getCurrentItem() == 0 && getScrollX() <= 0) {				// 判断是否是在最左端向右滑动				if (deltaX < 0) {					postParentMoveViewNotification(false);					mTouchState = TOUCH_STATE_REST;					return false;				}			} else if (getAdapter() != null && getCurrentItem() >= (getAdapter().getCount() - 1) && getScrollX() >= (getCurrentItem() * getWidth())) {				if (deltaX > 0) {					// 判断是否是在最右端向左滑动					postParentMoveViewNotification(false);					mTouchState = TOUCH_STATE_REST;					return false;				}			}			mTouchState = TOUCH_STATE_SCROLLING;			break;		case MotionEvent.ACTION_UP:		case MotionEvent.ACTION_CANCEL:			mTouchState = TOUCH_STATE_REST;			break;		}		touchBack = super.onTouchEvent(event);		postParentMoveViewNotification(true);		return touchBack;	}	private void setMyScroller() {		try {			Class<?> viewpager = ViewPager.class;			Field scroller = viewpager.getDeclaredField("mScroller");			scroller.setAccessible(true);			scroller.set(this, new MyScroller(getContext()));		} catch (Exception e) {			e.printStackTrace();		}	}	public class MyScroller extends Scroller {		public MyScroller(Context context) {			super(context, new DecelerateInterpolator());		}		@Override		public void startScroll(int startX, int startY, int dx, int dy, int duration) {			super.startScroll(startX, startY, dx, dy, 500);		}	}}