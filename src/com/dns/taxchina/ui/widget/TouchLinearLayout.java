package com.dns.taxchina.ui.widget;import android.content.Context;import android.util.AttributeSet;import android.view.GestureDetector;import android.view.GestureDetector.OnGestureListener;import android.view.MotionEvent;import android.view.ViewConfiguration;import android.widget.LinearLayout;/** * @author henzil.jack E-mail:henzil.jack@gmail.com * @version 创建时间：2013-7-10 下午3:02:11 * @Description 用作手势判断判断，左右返回上一页等。 */public class TouchLinearLayout extends LinearLayout implements OnGestureListener{	private float mLastX = -1; // save event x		private GestureDetector mGestureDetector;		private int mTouchSlop;		public TouchLinearLayout(Context context, AttributeSet attrs) {		super(context, attrs);		initView(context);	}	public TouchLinearLayout(Context context) {		super(context);		initView(context);	}		private void initView(Context context){		mTouchSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();		mGestureDetector = new GestureDetector(context, this); 	}		/**	 * 用来判断是否是最后一次down	 * 	 * 在至上如果有事件已经拦截了down事件时，则	 * **/	private Float downMotionEventX = null;		@Override	public boolean onInterceptTouchEvent(MotionEvent ev) {		boolean ret = super.onInterceptTouchEvent(ev);		int action = ev.getAction();		final float y = ev.getRawY();		final float x = ev.getRawX();		if ((action == MotionEvent.ACTION_MOVE)) {			final float dx = x - mLastX;			final float xDiff = Math.abs(dx);			if (xDiff > mTouchSlop) {				return true;			}					} else if (action == MotionEvent.ACTION_DOWN){			mLastX = y;			//只记录			downMotionEventX = ev.getX();		}		return ret;	}		@Override	public boolean onTouchEvent(MotionEvent event) {		super.onTouchEvent(event);		boolean b = mGestureDetector.onTouchEvent(event);		switch (event.getAction()) {		case MotionEvent.ACTION_UP:		case MotionEvent.ACTION_CANCEL:			downMotionEventX = null;			break;		default:			break;		}		return b;	}	@Override	public boolean onDown(MotionEvent e) {		// TODO Auto-generated method stub		return true;	}	@Override	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {		float lastX;		if(e1 == null){			lastX = downMotionEventX;		} else {			lastX = e1.getX();		}		float flingX = e2.getX() - lastX;//		float flingY = e2.getY() - e1.getY();		if(flingX >= 100){			//向右滑动  返回上一页			if(onLayoutGestureListener != null){				onLayoutGestureListener.back();			}					} else if(flingX <= -100){			//手指向左滑动  打开上一页			if(onLayoutGestureListener != null){				onLayoutGestureListener.next();			}		}				return true;	}	@Override	public void onLongPress(MotionEvent e) {		// TODO Auto-generated method stub			}	@Override	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {		// TODO Auto-generated method stub		return true;	}	@Override	public void onShowPress(MotionEvent e) {		// TODO Auto-generated method stub			}	@Override	public boolean onSingleTapUp(MotionEvent e) {		if(onLayoutGestureListener != null){			onLayoutGestureListener.click();			return true;		}		return false;	}	private OnLayoutGestureListener onLayoutGestureListener;		public void OnLayoutGestureListener(OnLayoutGestureListener onLayoutGestureListener){		this.onLayoutGestureListener = onLayoutGestureListener;	} 		public interface OnLayoutGestureListener{		public void back();				public void next();				public void click();	}	}