package com.dns.taxchina.ui.fragment;import java.util.ArrayList;import java.util.HashMap;import netlib.helper.DataServiceHelper;import netlib.model.BaseModel;import netlib.model.ErrorModel;import netlib.net.DataAsyncTaskPool;import netlib.net.DataJsonAsyncTask;import netlib.net.DataMode;import netlib.util.ErrorCodeUtil;import netlib.util.LibIOUtil;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.os.Bundle;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ListView;import android.widget.Toast;import com.dns.taxchina.R;import com.dns.taxchina.service.helper.ModelHelper;import com.dns.taxchina.service.model.BaseItemModel;import com.dns.taxchina.service.model.IndexContentModel;import com.dns.taxchina.ui.adapter.IndexContentAdapter;import com.dns.taxchina.ui.adapter.IndexPagerAdapter;import com.dns.taxchina.ui.widget.IndexViewPager;/** * @author henzil * @version create time:2014-4-24_下午1:59:19 * @Description 首页fragment */public class IndexFragment extends BaseFragment {	private IndexViewPager viewPager;	private ListView listView;	private IndexContentAdapter indexContentAdapter;	protected DataJsonAsyncTask asyncTask;	protected DataAsyncTaskPool dataPool;	protected DataServiceHelper dataServiceHelper;	protected ModelHelper jsonHelper;	@Override	protected void initData() {		loadingDialog.setOnKeyListener(new OnKeyListener() {			@Override			public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {				if (keyCode == KeyEvent.KEYCODE_BACK) {					if (loadingDialog != null)						loadingDialog.cancel();				}				return true;			}		});		dataPool = new DataAsyncTaskPool();		jsonHelper = new ModelHelper(context);		dataServiceHelper = new DataServiceHelper() {			@Override			public void preExecute() {				if (loadingDialog != null && !loadingDialog.isShowing()) {					loadingDialog.show();				}			}			@Override			public void postExecute(String TAG, Object result, Object... params) {				Log.v("tag", "updateView");				updateView(result);			}			@Override			public Object doInBackground(Object... params) {				try {					Thread.sleep(1000);				} catch (InterruptedException e) {					e.printStackTrace();				}				return jsonHelper.parseJson(LibIOUtil.convertStreamToStr(getResources().openRawResource(R.raw.index_fragment_json)));				// return null;			}		};	}	@Override	protected View initViews(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {		View view = inflater.inflate(R.layout.index_fragment, container, false);		View headView = inflater.inflate(R.layout.index_fragment_header_view, null);		viewPager = (IndexViewPager) headView.findViewById(R.id.view_pager);		listView = (ListView) view.findViewById(R.id.list_view);		indexContentAdapter = new IndexContentAdapter(context, TAG);		listView.addHeaderView(headView);		listView.setAdapter(indexContentAdapter);		return view;	}	@Override	protected void initWidgetActions() {		initNet();	}	private void initNet() {		HashMap<String, String> reqMap = new HashMap<String, String>();		reqMap.put("mode", "getSysMessageList");		reqMap.put("begin", "" + "1");		jsonHelper.updateParams(getString(R.string.base_url), reqMap, "com.dns.taxchina.service.model.IndexContentModel");		asyncTask = new DataJsonAsyncTask(TAG, dataServiceHelper, jsonHelper, DataMode.SERVER_LOCAL, true);		dataPool.execute(asyncTask);	}	protected void updateView(Object object) {		if (loadingDialog != null) {			if (loadingDialog.isShowing()) {				loadingDialog.dismiss();			}			loadingDialog = null;		}		if (object == null) {			return;		}		if (object instanceof ErrorModel) {// 网络连接失败			ErrorModel errorModel = (ErrorModel) object;			// TODO 提示出网络错误			Toast.makeText(context, ErrorCodeUtil.convertErrorCode(context, errorModel.getErrorCode()), Toast.LENGTH_SHORT).show();			return;		}		BaseModel m = (BaseModel) object;// 服务器返回错误		if (m.getCode() > 0) {			// TODO 提示出服务器端错误。			Toast.makeText(context, m.getMessage(), Toast.LENGTH_SHORT).show();			return;		}		IndexContentModel indexContentModel = (IndexContentModel) object;		IndexPagerAdapter indexPagerAdapter = new IndexPagerAdapter(context, getChildFragmentManager(),				(ArrayList<BaseItemModel>) indexContentModel.getAdList());		viewPager.setAdapter(indexPagerAdapter);		indexContentAdapter.refresh(indexContentModel.getDataList());	}}